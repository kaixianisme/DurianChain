<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Your HTML head content here -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Durian Tree Details</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.0/css/all.min.css">

    <style>
        /* Apply CSS styles here */

        /* Style for the page title */
        h1 {
            text-align: center;
            background-color: #3f51b5;
            color: white;
            padding: 10px;
        }

        /* Style for farmID and treeID paragraphs */
        p {
            font-weight: bold;
        }

        /* Style for durianID list */
        ul#durianIDList {
            list-style: none;
            padding: 0;
        }

        /* Style for individual durianID items */
        ul#durianIDList li {
            margin-bottom: 5px;
        }

        /* Style for the reviews container */
        #reviews-container {
            margin-top: 20px;
        }

        /* Style for individual review items */
        .review {
            border: 1px solid #ddd;
            padding: 10px;
            margin-bottom: 10px;
        }

        /* Style for review ratings */
        .review p {
            margin: 0;
        }

        /* Style for "No reviews available" message */
        #reviews-container p.no-reviews {
            font-style: italic;
        }

        /* Style for Average Overall Rating */
        .average-rating {
            color: #3f51b5;
            font-weight: bold;
        }

        /* Style for Overall Rating */
        .overall-rating {
            color: #f44336;
            font-weight: bold;
        }

        /* Style for Comment */
        .comment {
            color: #009688;
            font-style: italic;
        }

        /* Star rating styles */
        .star-rating {
            font-size: 24px;
        }

        .star-rating span {
            color: gold;
        }

        button {
            display: block;
            margin: 20px auto;
            padding: 10px 20px;
            background-color: #3f51b5;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-align: center;
            text-decoration: none;
        }
    </style>
</head>
<body>
    <h1>Durian Tree Details - T<%= treeID %></h1>
    <p>Farm ID: <%= farmID %></p>
    <p>Tree Information - T<%= treeID %></p>
    
    <!-- Display durian data and reviews for the specified tree here -->
    <div id="durianCountContainer">
      <!-- Durian count will be displayed here -->
  </div>

    <div id="durian-details-container">
        <!-- Durian details will be displayed here -->
    </div>

    <button id="toggleReviewsButton">Hide Reviews</button>
    <div id="reviews-container"></div>

    <script src="https://cdn.jsdelivr.net/npm/web3@1.6.1/dist/web3.min.js"></script>

    <script>
        // Assuming you have farmID and treeID as JavaScript variables
        const farmID = ("<%= farmID %>");
        const treeID = ("<%= treeID %>");
      
        // Function to fetch and display reviews with an overall rating
        async function fetchAndDisplayReviewsWithOverallRating() {
            const farmID = "<%= farmID %>"; // Get farmID from the template
            const treeID = "<%= treeID %>"; // Get treeID from the template

            try {
                // Send a request to your server to fetch all reviews for the tree
                const response = await fetch(`/get-reviews?farmID=${farmID}&treeID=${treeID}`);
                const reviews = await response.json();

                // Calculate the average overall rating
                const numReviews = reviews.length;
                let totalOverallRating = 0;

                reviews.forEach((review) => {
                    // Calculate the sum of individual ratings
                    const sumIndividualRatings =
                        review.creaminess +
                        review.fragment +
                        review.seedSize +
                        review.taste +
                        review.sweetness +
                        review.bitterness +
                        review.texture +
                        review.aroma;

                    // Calculate the average overall rating
                    const overallRating = sumIndividualRatings / 8;
                    totalOverallRating += overallRating;
                });

                const averageOverallRating = totalOverallRating / numReviews;

                // Display the average overall rating on the page with emphasis color
                const reviewsContainer = document.getElementById("reviews-container");
                reviewsContainer.innerHTML = `<p class="average-rating">Average Overall Rating: ${averageOverallRating.toFixed(2)}</p>`;

                if (reviews.length === 0) {
                    reviewsContainer.innerHTML += '<p>No reviews available.</p>';
                } else {
                    reviews.forEach((review, index) => {
                        const reviewElement = document.createElement("div");
                        reviewElement.classList.add("review");

                        // Create a heading with the review number
                        const reviewHeading = document.createElement("h2");
                        reviewHeading.textContent = `Review #${index + 1}`;

                        // Display review details
                        const reviewDetails = document.createElement("div");
                        reviewDetails.innerHTML = `
                            <p class="overall-rating">Overall Rating: ${((review.creaminess + review.fragment + review.seedSize + review.taste + review.sweetness + review.bitterness + review.texture + review.aroma) / 8).toFixed(2)}</p>
                            <p>Creaminess: ${review.creaminess}</p>
                            <p>Fragment: ${review.fragment}</p>
                            <p>Seed Size: ${review.seedSize}</p>
                            <p>Taste: ${review.taste}</p>
                            <p>Sweetness: ${review.sweetness}</p>
                            <p>Bitterness: ${review.bitterness}</p>
                            <p>Texture: ${review.texture}</p>
                            <p>Aroma: ${review.aroma}</p>
                            <p class="comment">Comment: ${review.comment}</p>
                        `;

                        reviewElement.appendChild(reviewHeading);
                        reviewElement.appendChild(reviewDetails);

                        reviewsContainer.appendChild(reviewElement);
                    });
                }
            } catch (error) {
                console.error(error);
                // Handle error
            }
        }

        // Toggle the visibility of reviews when the button is clicked
        function toggleReviews() {
            const reviewsContainer = document.getElementById("reviews-container");
            const toggleButton = document.getElementById("toggleReviewsButton");

            if (reviewsContainer.style.display === "none") {
                // Reviews are currently hidden, so show them
                reviewsContainer.style.display = "block";
                toggleButton.textContent = "Hide Reviews";
            } else {
                // Reviews are currently visible, so hide them
                reviewsContainer.style.display = "none";
                toggleButton.textContent = "Show Reviews";
            }
        }

        // Attach the toggleReviews function to the button click event
        const toggleButton = document.getElementById("toggleReviewsButton");
        toggleButton.addEventListener("click", toggleReviews);

        // Call the fetchAndDisplayReviewsWithOverallRating function when the page loads
        window.addEventListener("load", fetchAndDisplayReviewsWithOverallRating);


  const contractAddress = '0xd38EF75EB1b06Bb9749557428aBD61E471Bd6E35';
    const contractABI = [
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_country",
            "type": "string"
          },
          {
            "internalType": "uint32",
            "name": "_postCode",
            "type": "uint32"
          },
          {
            "internalType": "uint16",
            "name": "_farmID",
            "type": "uint16"
          },
          {
            "internalType": "uint32",
            "name": "_treeID",
            "type": "uint32"
          },
          {
            "internalType": "uint8",
            "name": "_durianType",
            "type": "uint8"
          },
          {
            "internalType": "uint32",
            "name": "_durianID",
            "type": "uint32"
          },
          {
            "internalType": "string",
            "name": "_harvestTime",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_scanTime",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_firstPlant",
            "type": "string"
          },
          {
            "internalType": "uint16",
            "name": "_workerID",
            "type": "uint16"
          }
        ],
        "name": "addDurian",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint16",
            "name": "_farmID",
            "type": "uint16"
          },
          {
            "internalType": "uint32",
            "name": "_treeID",
            "type": "uint32"
          },
          {
            "internalType": "uint8",
            "name": "_creaminess",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "_fragment",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "_seedSize",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "_taste",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "_sweetness",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "_bitterness",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "_texture",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "_aroma",
            "type": "uint8"
          },
          {
            "internalType": "string",
            "name": "_comment",
            "type": "string"
          }
        ],
        "name": "addReview",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint16",
            "name": "_farmID",
            "type": "uint16"
          },
          {
            "internalType": "uint32",
            "name": "_treeID",
            "type": "uint32"
          },
          {
            "internalType": "uint32",
            "name": "_durianID",
            "type": "uint32"
          }
        ],
        "name": "getDurianData",
        "outputs": [
          {
            "components": [
              {
                "internalType": "string",
                "name": "country",
                "type": "string"
              },
              {
                "internalType": "uint32",
                "name": "postCode",
                "type": "uint32"
              },
              {
                "internalType": "uint16",
                "name": "farmID",
                "type": "uint16"
              },
              {
                "internalType": "uint32",
                "name": "treeID",
                "type": "uint32"
              },
              {
                "internalType": "uint8",
                "name": "durianType",
                "type": "uint8"
              },
              {
                "internalType": "uint32",
                "name": "durianID",
                "type": "uint32"
              },
              {
                "internalType": "string",
                "name": "harvestTime",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "scanTime",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "firstPlant",
                "type": "string"
              },
              {
                "internalType": "uint16",
                "name": "workerID",
                "type": "uint16"
              }
            ],
            "internalType": "struct DurianContract.Durian",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint16",
            "name": "_farmID",
            "type": "uint16"
          },
          {
            "internalType": "uint32",
            "name": "_treeID",
            "type": "uint32"
          }
        ],
        "name": "getDurianIDs",
        "outputs": [
          {
            "internalType": "uint32[]",
            "name": "",
            "type": "uint32[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getFarmIDs",
        "outputs": [
          {
            "internalType": "uint16[]",
            "name": "",
            "type": "uint16[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint16",
            "name": "_farmID",
            "type": "uint16"
          },
          {
            "internalType": "uint32",
            "name": "_treeID",
            "type": "uint32"
          }
        ],
        "name": "getReviews",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint8",
                "name": "creaminess",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "fragment",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "seedSize",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "taste",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "sweetness",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "bitterness",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "texture",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "aroma",
                "type": "uint8"
              },
              {
                "internalType": "string",
                "name": "comment",
                "type": "string"
              }
            ],
            "internalType": "struct DurianContract.Review[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint16",
            "name": "_farmID",
            "type": "uint16"
          }
        ],
        "name": "getTreeIDs",
        "outputs": [
          {
            "internalType": "uint32[]",
            "name": "",
            "type": "uint32[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ];

    const web3 = new Web3("https://sepolia.infura.io/v3/2db8bf25ea424b7898c746d2bd37470a");
  const contract = new web3.eth.Contract(contractABI, contractAddress);
  
        // Function to retrieve durianIDs using getDurianIDs function
async function getDurianCount() {
  try {
    // Call the getDurianIDs function from your smart contract
    const durianIDs = await contract.methods.getDurianIDs(farmID, treeID).call();

    // Get the total count of durians produced by the tree
    const durianCount = durianIDs.length;

    // Display the total count in the HTML
    const durianCountContainer = document.getElementById("durianCountContainer");
    durianCountContainer.innerHTML = `Total Durians Produced from T${treeID}: ${durianCount}`;
  } catch (error) {
    console.error(error);
  }
}

// Call the getDurianCount function when the page loads
window.addEventListener("load", getDurianCount);
    </script>
</body>
</html>
